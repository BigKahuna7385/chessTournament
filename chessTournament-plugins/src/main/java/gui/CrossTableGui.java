package gui;

import application.Tournament;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import player.Player;
import transport.PlayerToPlayerUIMapper;
import transport.PlayerUiModel;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class CrossTableGui {
    private JTable crossTable;
    private JPanel crossTablePanel;

    private DefaultTableModel tableModel;
    private final Tournament tournament;

    public CrossTableGui(Tournament tournament) {
        this.tournament = tournament;
        setUpTable();
        refreshGamesList();
    }

    public JPanel getCrossTablePanel() {
        return crossTablePanel;
    }

    private void setUpTable() {
        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tableModel.addColumn("PlayerId");
        tableModel.addColumn("Name");

        for (int i = 0; i < tournament.getPlayerService().getAllRegisteredPlayers().length; i++) {
            tableModel.addColumn("" + (i + 1));
        }

        tableModel.addColumn("Points");
        tableModel.addColumn("Buchholz Score");
        tableModel.addColumn("SB Score");

        crossTable.setModel(tableModel);
        crossTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

    }

    public void refreshGamesList() {
        PlayerToPlayerUIMapper playerToPlayerUIMapper = new PlayerToPlayerUIMapper();

        tableModel.setRowCount(0);

        for (Player player : tournament.getPlayerService().getRankedPlayers()) {
            tableModel.addRow(getGameResults(playerToPlayerUIMapper.map(player)));
        }

        crossTablePanel.revalidate();
        crossTablePanel.repaint();
    }

    private Object[] getGameResults(PlayerUiModel playerUiModel) {
        Player player = tournament.getPlayerService().findPlayerById(playerUiModel.getId());
        Object[] rowInfo = new Object[]{playerUiModel.getId(), playerUiModel.getFullName(), playerUiModel.getScore(), playerUiModel.getBuchholzScore(), playerUiModel.getSonnebornBergerScore()};
        return tournament.getCrossTableService().createCrossTableFor(player, rowInfo, 2);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        crossTablePanel = new JPanel();
        crossTablePanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, 26, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Cross Table");
        crossTablePanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        crossTablePanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        crossTable = new JTable();
        scrollPane1.setViewportView(crossTable);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return crossTablePanel;
    }

}
