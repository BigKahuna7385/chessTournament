package gui;

import Player.Player;
import application.Tournament;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import transport.PlayerToPlayerUIMapper;
import transport.PlayerUiModel;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class TournamentGui extends JFrame {

    private final Tournament tournament;
    private JList<PlayerUiModel> registeredPlayersList;
    private JButton addPlayerButton;
    private JButton startButton;
    private JPanel tournamentPanel;
    private boolean registerInProgress;


    public TournamentGui(Tournament tournament) {
        this.tournament = tournament;
        registerInProgress = false;
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setContentPane(tournamentPanel);
        setTitle("Tournament-Manager");
        setSize(500, 500);
        setVisible(true);

        addPlayerButton.addActionListener(e -> {
            if (!registerInProgress) {
                new RegisterPlayerGui(tournament, this);
                setRegisterInProgress(true);
            }
        });

    }

    public void setRegisterInProgress(boolean registerInProgress) {
        addPlayerButton.setEnabled(!registerInProgress);
        this.registerInProgress = registerInProgress;
    }

    public void refreshPlayerList() {
        DefaultListModel<PlayerUiModel> playListModel = new DefaultListModel<>();
        PlayerToPlayerUIMapper playerToPlayerUIMapper = new PlayerToPlayerUIMapper();

        if (tournament.getPlayerService().getAllRegisteredPlayers().length == 0)
            return;

        for (Player player : tournament.getPlayerService().getAllRegisteredPlayers()) {
            playListModel.addElement(playerToPlayerUIMapper.map(player));
        }
        registeredPlayersList.setModel(playListModel);

        revalidate();
        repaint();
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        tournamentPanel = new JPanel();
        tournamentPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        tournamentPanel.setMinimumSize(new Dimension(500, 500));
        tournamentPanel.setPreferredSize(new Dimension(500, 500));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Tournament Registration");
        tournamentPanel.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        tournamentPanel.add(scrollPane1, new GridConstraints(1, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        registeredPlayersList = new JList();
        scrollPane1.setViewportView(registeredPlayersList);
        addPlayerButton = new JButton();
        addPlayerButton.setText("Add Player");
        tournamentPanel.add(addPlayerButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        tournamentPanel.add(startButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        tournamentPanel.add(spacer1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 5), new Dimension(-1, 5), new Dimension(-1, 5), 0, false));
        final Spacer spacer2 = new Spacer();
        tournamentPanel.add(spacer2, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_FIXED, 1, new Dimension(5, -1), new Dimension(5, -1), new Dimension(5, -1), 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return tournamentPanel;
    }


}

